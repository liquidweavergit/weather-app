# ==============================================================================
# Temperature Display App - Environment Variables Template
# ==============================================================================
# 
# This is the comprehensive environment variables template for all environments.
# Copy this file to create environment-specific configurations:
#
#   Development:  cp env.example .env
#   Production:   cp env.example .env.prod
#   Testing:      cp env.example .env.test
#
# SECURITY WARNING: Never commit actual .env files to version control!
# ==============================================================================

# ==============================================================================
# APPLICATION CONFIGURATION
# ==============================================================================

# Environment type (development, production, testing)
ENVIRONMENT=development

# Debug mode (true for development, false for production)
DEBUG=true

# Hot reload for development (true for development, false for production)
RELOAD=true

# Application host and port
APP_HOST=0.0.0.0
APP_PORT=8000

# ==============================================================================
# SECURITY CONFIGURATION
# ==============================================================================

# Secret key for JWT tokens and session management
# CRITICAL: Generate a secure random key for production!
# Generate with: python -c "import secrets; print(secrets.token_urlsafe(32))"
SECRET_KEY=your_super_secret_key_minimum_32_characters_long_change_in_production

# CORS origins (comma-separated for multiple origins)
CORS_ORIGINS=http://localhost:3000,http://localhost:8000,http://127.0.0.1:8000

# Allowed hosts (comma-separated)
ALLOWED_HOSTS=localhost,127.0.0.1,0.0.0.0

# ==============================================================================
# DATABASE CONFIGURATION
# ==============================================================================

# Primary database URL (Docker service name: db)
# Format: postgresql+asyncpg://user:password@host:port/database
DATABASE_URL=postgresql+asyncpg://postgres:password@db:5432/temperature_app

# Database connection pool settings
DB_POOL_SIZE=5
DB_MAX_OVERFLOW=10
DB_POOL_TIMEOUT=30
DB_POOL_RECYCLE=3600

# Individual database components (for Docker Compose)
POSTGRES_DB=temperature_app
POSTGRES_USER=postgres
POSTGRES_PASSWORD=password
POSTGRES_HOST=db
POSTGRES_PORT=5432

# ==============================================================================
# REDIS CACHE CONFIGURATION
# ==============================================================================

# Redis URL (Docker service name: redis)
REDIS_URL=redis://redis:6379/0

# Redis connection settings
REDIS_HOST=redis
REDIS_PORT=6379
REDIS_DB=0
REDIS_PASSWORD=

# Redis connection pool settings
REDIS_POOL_SIZE=10
REDIS_POOL_TIMEOUT=5

# ==============================================================================
# WEATHER API CONFIGURATION
# ==============================================================================

# Primary weather API (OpenWeatherMap)
# Get your API key from: https://openweathermap.org/api
WEATHER_API_KEY=your_openweathermap_api_key_here
WEATHER_API_BASE_URL=https://api.openweathermap.org/data/2.5

# Fallback weather API (AccuWeather)
# Get your API key from: https://developer.accuweather.com/
FALLBACK_WEATHER_API_KEY=your_accuweather_api_key_here
FALLBACK_WEATHER_API_BASE_URL=https://dataservice.accuweather.com

# Weather API settings
WEATHER_API_TIMEOUT=10
WEATHER_API_RETRIES=3
WEATHER_API_RATE_LIMIT=1000

# ==============================================================================
# LOCATION SERVICES CONFIGURATION
# ==============================================================================

# Geolocation API (optional)
# IP geolocation service for automatic location detection
GEOLOCATION_API_KEY=optional_geolocation_service_key
GEOLOCATION_API_BASE_URL=https://api.ipgeolocation.io

# Location search settings
LOCATION_SEARCH_TIMEOUT=5
LOCATION_CACHE_TTL=3600

# ==============================================================================
# CACHING CONFIGURATION
# ==============================================================================

# Cache TTL settings (in seconds)
CACHE_TTL=300                    # Default cache TTL (5 minutes)
WEATHER_CACHE_TTL=300           # Weather data cache (5 minutes)
LOCATION_CACHE_TTL=3600         # Location data cache (1 hour)
USER_PREFERENCES_CACHE_TTL=1800 # User preferences cache (30 minutes)

# Cache warming settings
CACHE_WARM_ON_STARTUP=true
CACHE_WARM_POPULAR_LOCATIONS=true

# ==============================================================================
# API RATE LIMITING
# ==============================================================================

# Rate limiting (requests per minute)
API_RATE_LIMIT=60               # General API rate limit
WEATHER_API_RATE_LIMIT=100      # Weather endpoint rate limit
LOCATION_API_RATE_LIMIT=30      # Location endpoint rate limit

# Rate limiting storage (redis or memory)
RATE_LIMIT_STORAGE=redis

# ==============================================================================
# LOGGING CONFIGURATION
# ==============================================================================

# Log level (DEBUG, INFO, WARNING, ERROR, CRITICAL)
LOG_LEVEL=INFO

# Log format (json or text)
LOG_FORMAT=json

# Log file settings
LOG_TO_FILE=true
LOG_FILE_PATH=logs/app.log
LOG_FILE_MAX_SIZE=10485760      # 10MB
LOG_FILE_BACKUP_COUNT=5

# Structured logging settings
LOG_REQUEST_ID=true
LOG_USER_ID=true
LOG_CORRELATION_ID=true

# ==============================================================================
# MONITORING & OBSERVABILITY
# ==============================================================================

# Application metrics
ENABLE_METRICS=true
METRICS_PORT=9090
METRICS_PATH=/metrics

# Health check settings
HEALTH_CHECK_TIMEOUT=5
HEALTH_CHECK_INTERVAL=30

# Tracing (optional)
ENABLE_TRACING=false
JAEGER_AGENT_HOST=localhost
JAEGER_AGENT_PORT=6831

# ==============================================================================
# PERFORMANCE CONFIGURATION
# ==============================================================================

# Async settings
ASYNC_POOL_SIZE=100
ASYNC_TIMEOUT=30

# HTTP client settings
HTTP_TIMEOUT=10
HTTP_MAX_CONNECTIONS=100
HTTP_MAX_KEEPALIVE_CONNECTIONS=20

# Background task settings
ENABLE_BACKGROUND_TASKS=true
TASK_QUEUE_SIZE=1000

# ==============================================================================
# FEATURE FLAGS
# ==============================================================================

# Feature toggles
ENABLE_USER_REGISTRATION=true
ENABLE_LOCATION_HISTORY=true
ENABLE_WEATHER_ALERTS=false
ENABLE_PREMIUM_FEATURES=false
ENABLE_ANALYTICS=false

# UI features
ENABLE_DARK_MODE=true
ENABLE_GEOLOCATION=true
ENABLE_OFFLINE_MODE=true

# ==============================================================================
# DEVELOPMENT SETTINGS
# ==============================================================================

# Development tools (development environment only)
ENABLE_DEBUG_TOOLBAR=true
ENABLE_ADMIN_UI=true
ENABLE_API_DOCS=true

# Testing settings
ENABLE_TEST_ENDPOINTS=false
MOCK_EXTERNAL_APIS=false

# Development database settings
DEV_SEED_DATABASE=true
DEV_RESET_DATABASE=false

# ==============================================================================
# PRODUCTION SETTINGS
# ==============================================================================

# Production security
SECURE_SSL_REDIRECT=true
SECURE_HSTS_SECONDS=31536000
SECURE_HSTS_INCLUDE_SUBDOMAINS=true
SECURE_CONTENT_TYPE_NOSNIFF=true
SECURE_BROWSER_XSS_FILTER=true
SECURE_FRAME_DENY=true

# Production performance
GZIP_COMPRESSION=true
STATIC_FILE_CACHE_CONTROL=max-age=31536000

# Production monitoring
SENTRY_DSN=
SENTRY_ENVIRONMENT=production
SENTRY_SAMPLE_RATE=1.0

# ==============================================================================
# DOCKER COMPOSE SETTINGS
# ==============================================================================

# Container resource limits
APP_MEMORY_LIMIT=512m
APP_CPU_LIMIT=1.0
DB_MEMORY_LIMIT=1g
DB_CPU_LIMIT=2.0
REDIS_MEMORY_LIMIT=256m
REDIS_CPU_LIMIT=0.5

# Docker networking
DOCKER_NETWORK_SUBNET=172.20.0.0/16

# ==============================================================================
# EXTERNAL INTEGRATIONS
# ==============================================================================

# Email service (optional)
EMAIL_BACKEND=smtp
EMAIL_HOST=smtp.gmail.com
EMAIL_PORT=587
EMAIL_USE_TLS=true
EMAIL_HOST_USER=
EMAIL_HOST_PASSWORD=

# Cloud storage (optional)
CLOUD_STORAGE_PROVIDER=
CLOUD_STORAGE_BUCKET=
CLOUD_STORAGE_REGION=
CLOUD_STORAGE_ACCESS_KEY=
CLOUD_STORAGE_SECRET_KEY=

# Analytics (optional)
GOOGLE_ANALYTICS_ID=
MIXPANEL_TOKEN=

# ==============================================================================
# BACKUP AND MAINTENANCE
# ==============================================================================

# Backup settings
ENABLE_AUTO_BACKUP=false
BACKUP_SCHEDULE=0 2 * * *        # Daily at 2 AM
BACKUP_RETENTION_DAYS=30
BACKUP_STORAGE_PATH=./backups

# Maintenance mode
MAINTENANCE_MODE=false
MAINTENANCE_MESSAGE=Application is under maintenance

# ==============================================================================
# ENVIRONMENT-SPECIFIC OVERRIDES
# ==============================================================================

# These variables should be overridden in environment-specific files:
#
# .env.dev:
#   DEBUG=true
#   RELOAD=true
#   LOG_LEVEL=DEBUG
#   ENABLE_DEBUG_TOOLBAR=true
#
# .env.prod:
#   DEBUG=false
#   RELOAD=false
#   LOG_LEVEL=WARNING
#   SECURE_SSL_REDIRECT=true
#
# .env.test:
#   ENVIRONMENT=testing
#   DATABASE_URL=postgresql+asyncpg://postgres:test_password@test_db:5432/temperature_app_test
#   REDIS_URL=redis://test_redis:6379/1

# ==============================================================================
# SETUP INSTRUCTIONS
# ==============================================================================
#
# 1. Copy this file to .env (for development)
# 2. Generate a secure SECRET_KEY:
#    python -c "import secrets; print(secrets.token_urlsafe(32))"
# 3. Obtain API keys:
#    - OpenWeatherMap: https://openweathermap.org/api
#    - AccuWeather: https://developer.accuweather.com/
# 4. Configure database and Redis passwords
# 5. Start the application:
#    ./docker-manage.sh start dev
#
# For production deployment, create .env.prod with production values.
# For testing, create .env.test with test-specific settings.
# ============================================================================== 